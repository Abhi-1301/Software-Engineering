package frontend;

import java.io.File;
import java.io.FileNotFoundException;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.util.Calendar;
import java.util.Date;
import java.util.Scanner;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;

public class log extends javax.swing.JFrame {

	ScheduledExecutorService executor = Executors.newScheduledThreadPool(1);

	public log() {
		initComponents();
		setVisible(true);
		setDefaultCloseOperation(javax.swing.JFrame.DISPOSE_ON_CLOSE);

		LocalDate date = LocalDate.now();

		executor.scheduleAtFixedRate(getReport, 0, 1000, TimeUnit.MILLISECONDS);
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated Code">
	private void initComponents() {

		jPanel1 = new javax.swing.JPanel();
		jPanel2 = new javax.swing.JPanel();
		jLabel1 = new javax.swing.JLabel();
		jScrollPane1 = new javax.swing.JScrollPane();
		reportText = new javax.swing.JTextArea();
		from = new com.toedter.calendar.JDateChooser();
		to = new com.toedter.calendar.JDateChooser();
		jLabel2 = new javax.swing.JLabel();
		jLabel3 = new javax.swing.JLabel();

		setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

		jPanel1.setBackground(new java.awt.Color(240, 123, 63));

		jPanel2.setBackground(new java.awt.Color(45, 64, 89));

		jLabel1.setFont(new java.awt.Font("Dubai", 1, 48)); // NOI18N
		jLabel1.setForeground(new java.awt.Color(238, 238, 238));
		jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		jLabel1.setText("Log Report");

		javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
		jPanel2.setLayout(jPanel2Layout);
		jPanel2Layout.setHorizontalGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(jPanel2Layout.createSequentialGroup().addContainerGap().addComponent(jLabel1,
						javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
						.addContainerGap()));
		jPanel2Layout.setVerticalGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(jPanel2Layout.createSequentialGroup().addGap(26, 26, 26).addComponent(jLabel1)
						.addContainerGap(38, Short.MAX_VALUE)));

		reportText.setEditable(false);
		reportText.setColumns(20);
		reportText.setRows(5);
		jScrollPane1.setViewportView(reportText);

		from.setDateFormatString("dd-MM-yyyy");

		to.setDateFormatString("dd-MM-yyyy");

		jLabel2.setFont(new java.awt.Font("Dubai", 1, 18)); // NOI18N
		jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
		jLabel2.setText("From");

		jLabel3.setFont(new java.awt.Font("Dubai", 1, 18)); // NOI18N
		jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
		jLabel3.setText("To");

		javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
		jPanel1.setLayout(jPanel1Layout);
		jPanel1Layout
				.setHorizontalGroup(
						jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
								.addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
								.addGroup(jPanel1Layout.createSequentialGroup().addGap(19, 19, 19)
										.addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 708,
												javax.swing.GroupLayout.PREFERRED_SIZE)
										.addContainerGap(23, Short.MAX_VALUE))
								.addGroup(jPanel1Layout.createSequentialGroup().addGap(46, 46, 46)
										.addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE,
												javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
										.addGap(18, 18, 18)
										.addComponent(from, javax.swing.GroupLayout.PREFERRED_SIZE, 139,
												javax.swing.GroupLayout.PREFERRED_SIZE)
										.addGap(84, 84, 84)
										.addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE,
												javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
										.addGap(18, 18, 18).addComponent(to, javax.swing.GroupLayout.PREFERRED_SIZE,
												139, javax.swing.GroupLayout.PREFERRED_SIZE)
										.addGap(116, 116, 116)));
		jPanel1Layout.setVerticalGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(jPanel1Layout.createSequentialGroup()
						.addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE,
								javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
						.addGap(18, 18, 18)
						.addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
								.addComponent(from, javax.swing.GroupLayout.PREFERRED_SIZE, 30,
										javax.swing.GroupLayout.PREFERRED_SIZE)
								.addComponent(to, javax.swing.GroupLayout.PREFERRED_SIZE, 30,
										javax.swing.GroupLayout.PREFERRED_SIZE)
								.addComponent(jLabel3).addComponent(jLabel2))
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 46, Short.MAX_VALUE)
						.addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 369,
								javax.swing.GroupLayout.PREFERRED_SIZE)
						.addContainerGap()));

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(layout.createSequentialGroup()
						.addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE,
								javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
						.addGap(0, 0, Short.MAX_VALUE)));
		layout.setVerticalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(layout.createSequentialGroup()
						.addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE,
								javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
						.addGap(0, 0, Short.MAX_VALUE)));

		pack();
	}// </editor-fold>

	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[]) {
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(log.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(log.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(log.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(log.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
		// </editor-fold>

		/* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				new log().setVisible(true);
			}
		});
	}

	Runnable getReport = new Runnable() {
		@Override
		public void run() {
			DateFormat format1 = new SimpleDateFormat("dd-mm-yyyy");
			DateFormat formatter = new SimpleDateFormat("EEE MMM dd HH:mm:ss z yyyy");
			String report = "";
			try {
				File file = new File("src/report.txt");
				Scanner reader = new Scanner(file);
				while (reader.hasNextLine()) {
					String data = reader.nextLine();
					if (data.length() > 1 && data != "\n") {
						try {

							Date toD = (Date) formatter.parse(String.valueOf(to.getDate()));
							Date fromD = (Date) formatter.parse(String.valueOf(from.getDate()));
							Calendar calf = Calendar.getInstance();
							Calendar calt = Calendar.getInstance();
							calf.setTime(fromD);
							calt.setTime(toD);
							String fromDate = calf.get(Calendar.DATE) + "-" + (calf.get(Calendar.MONTH) + 1) + "-"
									+ calf.get(Calendar.YEAR);
							String toDate = calt.get(Calendar.DATE) + "-" + (calt.get(Calendar.MONTH) + 1) + "-"
									+ calt.get(Calendar.YEAR);
//             
							String d = (data.substring(0, 10));
							Date fD = new SimpleDateFormat("dd-MM-yyyy").parse(fromDate);
							Date tD = new SimpleDateFormat("dd-MM-yyyy").parse(toDate);
							Date dD = new SimpleDateFormat("dd-MM-yyyy").parse(d);
							if (dD.compareTo(fD) >= 0 && dD.compareTo(tD) <= 0) {
								report += "\n" + data + "\n";
							}
//							System.out.println("HI");
							System.out.println(report);
						} catch (ParseException e) {
							report = "Set Valid Date";
						}
					}
				}
				reader.close();
			} catch (FileNotFoundException e) {
				System.out.println("ERROR BUDDY");
			} catch (NullPointerException e) {
				report = "ERROR OF DATE BUDDY";
			}
			reportText.setText(report);
		}
	};

	// Variables declaration - do not modify
	private com.toedter.calendar.JDateChooser from;
	private javax.swing.JLabel jLabel1;
	private javax.swing.JLabel jLabel2;
	private javax.swing.JLabel jLabel3;
	private javax.swing.JPanel jPanel1;
	private javax.swing.JPanel jPanel2;
	private javax.swing.JScrollPane jScrollPane1;
	private javax.swing.JTextArea reportText;
	private com.toedter.calendar.JDateChooser to;
	// End of variables declaration
}
